{"version":3,"file":"static/js/503.536276ee.chunk.js","mappings":"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","sources":["pages/ExportTimeSeries.js","pages/TimeseriesPage.js"],"sourcesContent":["import React from 'react'\nimport jsPDF from 'jspdf';\nimport domtoimage from 'dom-to-image';\nimport { useAlertContext } from '../context/AlertContext';\nimport Logo from \"../assets/images/export-logo.jpg\"\nimport MapLegend from \"../assets/images/map-legend.jpg\"\n\n\n\nconst ExportTimeSeries = ({ mapContainerRef }) => {\n    const { setAlertMessage, setShowAlert } = useAlertContext();\n    const handleExportMapPDF = () => {\n        const mapContainer = mapContainerRef.current;\n        const viewportWidth = window.innerWidth;\n\n        const logo = new Image();\n        logo.src = Logo;\n\n\n        setAlertMessage('Plot is downloading..')\n        setShowAlert(true)\n\n\n        const options = {\n            width: mapContainer.offsetWidth * 2,\n            height: mapContainer.offsetHeight * 2,\n            style: {\n                transform: 'scale(2)',\n                transformOrigin: 'top left',\n                width: '100%',\n                height: 'auto',\n            },\n        };\n\n        domtoimage\n            .toBlob(mapContainer, options)\n            .then((blob) => {\n                const reader = new FileReader();\n                reader.onloadend = () => {\n                    const img = new Image();\n                    img.onload = () => {\n                        const aspectRatio = img.width / img.height;\n                        const pdfOrientation = viewportWidth <= 767 ? 'portrait' : 'landscape';\n                        const pdf = new jsPDF(pdfOrientation, 'px', 'a4');\n\n                        // Original Width=450px, Height=100px\n                        const logoWidth = 150; // Adjust the width of the logo as needed\n                        const logoHeight = 33.333;\n                        // const logoX = (pdf.internal.pageSize.getWidth() - logoWidth) / 2;\n                        const logoX = 10;\n                        const logoY = 6; // Adjust the Y-coordinate for the logo placement\n                        pdf.addImage(logo, 'PNG', logoX, logoY, logoWidth, logoHeight);\n\n                        // Original Width: 900, height 200\n                        const legendWidth = 200; // Adjust the width of the legend as needed\n                        const legendHeight = 44.444; // Adjust the height of the legend as needed\n                        const legendX = pdf.internal.pageSize.getWidth() - legendWidth - 10; // Adjust the X-coordinate for the legend placement\n                        const legendY = 10; // Adjust the Y-coordinate for the legend placement\n                        pdf.addImage(MapLegend, 'JPEG', legendX, legendY, legendWidth, legendHeight);\n\n\n                        // Add title at the top\n                        // const title = mapTitle;\n                        // const titleFontSize = 16;\n                        // const titleTextWidth = pdf.getStringUnitWidth(title) * titleFontSize / pdf.internal.scaleFactor;\n                        // const titleTextX = (pdf.internal.pageSize.getWidth() - titleTextWidth) / 2;\n                        // const titleTextY = 20; // Y-coordinate for the title\n\n                        // pdf.setFontSize(titleFontSize);\n                        // pdf.text(titleTextX, titleTextY, title);\n\n\n                        if (viewportWidth <= 767) {\n                            const pdfHeight = pdf.internal.pageSize.getHeight() - 100; // Set the desired height for PDF if viewport width <= 767\n                            const pdfWidth = pdfHeight * aspectRatio;\n                            const x = (pdf.internal.pageSize.getWidth() - pdfWidth) / 2;\n                            const y = (pdf.internal.pageSize.getHeight() - pdfHeight) / 2+20;\n                            pdf.addImage(img, 'PNG', x, y, pdfWidth, pdfHeight);\n                        } else {\n                            const pdfWidth = pdf.internal.pageSize.getWidth()-15; // Use A4 width for PDF if viewport width > 767\n                            const pdfHeight = pdfWidth / aspectRatio;\n                            const x = 0;\n                            const y = (pdf.internal.pageSize.getHeight() - pdfHeight) / 2;\n                            pdf.addImage(img, 'PNG', x, y, pdfWidth, pdfHeight);\n                        }\n\n                        // Add text line at the bottom\n                        const websiteName = 'This plot has been downloaded from DROUGHT ATLAS OF INDIA (www.indiadroughtatlas.in)';\n                        const fontSize = 8;\n                        const textWidth = pdf.getStringUnitWidth(websiteName) * fontSize / pdf.internal.scaleFactor;\n                        const textX = (pdf.internal.pageSize.getWidth() - textWidth) / 2; // X-coordinate for center alignment\n                        const textY = pdf.internal.pageSize.getHeight() - 10; // Y-coordinate for the text\n\n                        pdf.setFontSize(fontSize);\n                        pdf.text(textX, textY, websiteName);\n\n                        const pdfOptions = {\n                            compress: true, // Enable compression\n                            quality: 0.3, // Adjust the quality (0.0 - 1.0, default is 0.9)\n                        };\n\n                        pdf.save('timeseries.pdf', pdfOptions);\n\n                        setAlertMessage('Plot has been exported as PDF successfully!')\n                        setShowAlert(true)\n                    };\n                    img.src = reader.result;\n                };\n                reader.readAsDataURL(blob);\n            })\n            .catch((error) => {\n                setAlertMessage('Error exporting plot image:', error)\n                setShowAlert(true)\n            });\n    };\n\n    return (\n        <button onClick={handleExportMapPDF} className=\"print_timesiries_btn\">\n            Export Time Series\n        </button>\n    )\n}\n\nexport default ExportTimeSeries","import React, { useEffect, useRef, useState } from 'react'\nimport Plot from 'react-plotly.js';\n\nimport { Box } from \"@mui/system\";\nimport { Autocomplete, TextField } from \"@mui/material\";\nimport PlaceAttributes from \"../assets/data/PlaceAttributes.json\";\nimport ExportTimeSeries from './ExportTimeSeries';\n\n\nconst TimeseriesPage = () => {\n    const mapContainerRef = useRef(null);\n    const [startYear, setStartYear] = useState(null);\n    const [endYear, setEndYear] = useState(null);\n    const [selectedSession, setSelectedSession] = useState(null);\n\n    const [loading, setLoading] = useState(false);\n\n    const [tehsilList, setTehsilList] = useState([]);\n    const [tehsilSelectedItem, setTehsilSelectedItem] = useState([]);\n\n    const [selectedData, setSelectedData] = useState(null);\n    const [droughtArea, setDroughtArea] = useState(null);\n    const [droughtIntensity, setDroughtIntensity] = useState(null);\n\n\n\n    const plotData = selectedData && selectedData.length > 0\n        ? Object.entries(selectedData[0])\n            .filter(([key, value]) => key !== \"ID\" && parseInt(key) >= startYear && parseInt(key) <= endYear)\n            .map(([year, droughtValue]) => ({\n                Year: parseInt(year),\n                DroughtValue: parseFloat(droughtValue),\n            }))\n        : [];\n\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                setLoading(true);\n                const droughtAreaResponse = await fetch(`https://wcl-iitgn.github.io/india-drought-atlas-data/Area.json`);\n                const droughtArea = await droughtAreaResponse.json();\n\n                const droughtIntensityResponse = await fetch(`https://wcl-iitgn.github.io/india-drought-atlas-data/Intensity.json`);\n                const droughtIntensity = await droughtIntensityResponse.json();\n\n                setDroughtArea(droughtArea);\n                setDroughtIntensity(droughtIntensity);\n                setLoading(false);\n\n            } catch (error) {\n                console.error(\"Error fetching and filtering wind data:\", error);\n            }\n        }\n        fetchData();\n    }, []);\n\n\n    useEffect(() => {\n        if (selectedSession && startYear && endYear && tehsilSelectedItem) {\n            const fetchData = async () => {\n                try {\n                    setLoading(true);\n                    // Fetching data from the API\n                    const formattedSession = selectedSession.replace(/\\s+/g, '_');\n                    const response = await fetch(`https://wcl-iitgn.github.io/india-drought-atlas-data/${formattedSession}.json`);\n                    const droughtData = await response.json();\n\n                    const filteredDroughtData = droughtData.filter(data => data.ID === tehsilSelectedItem[0].ID.toString());\n                    setSelectedData(filteredDroughtData);\n                    setLoading(false);\n\n                } catch (error) {\n                    console.error(\"Error fetching and filtering wind data:\", error);\n                }\n            };\n            fetchData();\n        }\n    }, [selectedSession, startYear, endYear, tehsilSelectedItem]);\n\n\n\n    const handleDistrictSelect = (event, value) => {\n        let items = PlaceAttributes.filter((item) => item.DISTRICT === value);\n        items = [...new Set(items.map((item) => item))];\n        items.sort();\n\n        setTehsilList(items);\n    };\n\n    const handleTehsilSelect = (event, value) => {\n        let item = tehsilList.filter((item) => item.TEHSIL === value);\n        setTehsilSelectedItem(item);\n    };\n\n    const handleStartYearChange = (event, value) => {\n        setStartYear(value);\n    };\n\n\n    const handleEndYearChange = (event, value) => {\n        setEndYear(value);\n    };\n\n\n    const handleSessionChange = (event, value) => {\n        setSelectedSession(value);\n    };\n\n\n\n\n    return (\n        <div className='dasboard_page_container'>\n\n            <div className='main_dashboard'>\n                <div className='left_panel'>\n\n\n                    <div className='border border-secondary p-2 mb-2'>\n                        <Autocomplete\n                            style={{ marginBottom: \"20px\" }}\n                            onChange={(event, value) => handleDistrictSelect(event, value)}\n                            id=\"district\"\n                            getOptionLabel={(district) => `${district}`}\n                            options={[...new Set(PlaceAttributes.map((item) => item.DISTRICT))]}\n                            isOptionEqualToValue={(option, value) => option.Name === value.Name}\n                            noOptionsText={\"No Available Data\"}\n                            // disabled={districtList.length === 0}\n                            renderOption={(props, district) => (\n                                <Box component=\"li\" {...props} key={district}\n                                    sx={{\n                                        fontSize: \"14px\",\n                                    }}>\n                                    {district}\n                                </Box>\n                            )}\n                            renderInput={(params) => <TextField {...params}\n\n                                label=\"Search District\" />}\n                        />\n\n                        <Autocomplete\n                            onChange={(event, value) => handleTehsilSelect(event, value)}\n                            id=\"tehsil\"\n                            disabled={tehsilList.length === 0}\n                            getOptionLabel={(tehsil) => `${tehsil}`}\n                            options={[...new Set(tehsilList.map((item) => item.TEHSIL))]}\n                            isOptionEqualToValue={(option, value) => option.Name === value.Name}\n                            noOptionsText={\"No Available Data\"}\n                            renderOption={(props, tehsil) => (\n                                <Box component=\"li\" {...props} key={tehsil}\n                                    sx={{\n                                        fontSize: \"14px\",\n                                    }}>\n                                    {tehsil}\n                                </Box>\n                            )}\n                            renderInput={(params) => <TextField {...params} label=\"Search Tehsil\" />}\n                        />\n                    </div>\n\n\n\n\n\n\n                    <div className='border border-secondary p-2 mb-2'>\n                        <Autocomplete\n                            style={{ marginBottom: \"10px\" }}\n                            onChange={(event, value) => handleStartYearChange(event, value)}\n                            id=\"startyear\"\n                            disabled={tehsilSelectedItem.length === 0}\n                            options={Array.from({ length: 2020 - 1900 }, (_, index) => `${1901 + index}`)}\n                            noOptionsText=\"No Available Data\"\n                            renderOption={(props, year) => (\n                                <Box component=\"li\" {...props} key={year}\n                                    sx={{\n                                        fontSize: \"14px\",\n                                    }}>\n                                    {year}\n                                </Box>\n                            )}\n                            renderInput={(params) => (\n                                <TextField\n                                    {...params}\n                                    label=\"Select Start Year\"\n                                    className=\"form-select\"\n                                    aria-label=\"Default select example\"\n                                    value={startYear}\n                                />\n                            )}\n                        />\n\n                        <Autocomplete\n                            disabled={tehsilSelectedItem.length === 0}\n                            style={{ marginBottom: \"10px\" }}\n                            onChange={(event, value) => handleEndYearChange(event, value)}\n                            id=\"endyear\"\n                            options={Array.from({ length: 2020 - 1900 }, (_, index) => `${1901 + index}`)}\n                            noOptionsText=\"No Available Data\"\n                            renderOption={(props, year) => (\n                                <Box component=\"li\" {...props} key={year}\n                                    sx={{\n                                        fontSize: \"14px\",\n                                    }}>\n                                    {year}\n                                </Box>\n                            )}\n                            renderInput={(params) => (\n                                <TextField\n                                    {...params}\n                                    label=\"Select End Year\"\n                                    className=\"form-select\"\n                                    aria-label=\"Default select example\"\n                                    value={endYear}\n                                />\n                            )}\n                        />\n                    </div>\n\n                    <div className='border border-secondary p-2 mb-2'>\n                        <Autocomplete\n                            // style={{ marginBottom: \"5px\", }}\n                            onChange={handleSessionChange}\n                            id=\"session\"\n                            options={[\n                                \"Summer Monsoon\",\n                                \"Winter Monsoon\",\n                                \"Calendar Year\",\n                                \"Water Year\",\n                            ]}\n                            renderInput={(params) => (\n                                <TextField {...params} className=\"form-select mb-3\" label=\"Select Season\" />\n                            )}\n                        />\n\n                        <label className=\"form-label\">Or</label><br />\n\n                        <Autocomplete\n                            // style={{ marginBottom: \"5px\", }}\n                            onChange={handleSessionChange}\n                            id=\"month\"\n                            options={[\n                                \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n                                \"July\", \"August\", \"September\", \"October\", \"November\", \"December\",\n                            ]}\n                            renderInput={(params) => (\n                                <TextField {...params} className=\"form-select mb-3\" label=\"Select Month\" />\n                            )}\n                        />\n                    </div>\n\n                    {plotData && plotData.length > 0 && selectedSession && (\n                        <ExportTimeSeries mapContainerRef={mapContainerRef} />\n                    )}\n\n\n\n\n\n\n                </div>\n\n\n                <div className='right_panel' ref={mapContainerRef} >\n\n\n                    {plotData && plotData.length > 0 && selectedSession && (\n                        <>\n                            {tehsilSelectedItem && tehsilSelectedItem.length > 0 && (\n                                <div className='timeseries_heading'>\n                                    <p><b>Region: </b>{tehsilSelectedItem[0].TEHSIL}, {tehsilSelectedItem[0].DISTRICT}, {tehsilSelectedItem[0].STATE} </p>\n                                    <p><b>Season/Month: </b>{selectedSession}</p>\n\n\n                                </div>\n\n                            )}\n\n\n                            <Plot\n                                data={[\n                                    {\n                                        x: plotData.map(entry => entry.Year),\n                                        y: plotData.map(entry => entry.DroughtValue),\n\n                                        type: 'scatter',\n                                        mode: 'lines+markers',\n                                        marker: { color: 'red' },\n                                    },\n                                ]}\n                                layout={{\n                                    // title: ,\n                                    xaxis: {\n                                        title: 'Year',\n                                    },\n                                    yaxis: {\n                                        title: 'SPEI (Standardized Precipitation Evapotranspiration Index)',\n                                    },\n                                }}\n                                style={{ width: \"100%\", height: \"calc(100% - 100px)\" }}\n                            />\n                        </>\n\n                    )}\n\n                    {droughtArea && droughtIntensity && plotData.length === 0 && (\n                        <>\n\n                            <Plot\n                                data={[\n                                    {\n                                        x: droughtArea.map(entry => entry.Year),\n                                        y: droughtArea.map(entry => entry.Summer_Monsoon),\n                                        type: 'scatter',\n                                        mode: 'lines+markers',\n                                        marker: { color: 'red' },\n                                        name: 'Summer Monsoon', // Assign a name to the trace\n                                    },\n                                    {\n                                        x: droughtArea.map(entry => entry.Year),\n                                        y: droughtArea.map(entry => entry.Winter_Monsoon),\n                                        type: 'scatter',\n                                        mode: 'lines+markers',\n                                        marker: { color: 'blue' },\n                                        name: 'Winter Monsoon', // Assign a name to the trace\n                                    },\n                                    {\n                                        x: droughtArea.map(entry => entry.Year),\n                                        y: droughtArea.map(entry => entry.Calendar_Year),\n                                        type: 'scatter',\n                                        mode: 'lines+markers',\n                                        marker: { color: 'green' },\n                                        name: 'Calendar Year', // Assign a name to the trace\n                                    },\n                                    {\n                                        x: droughtArea.map(entry => entry.Year),\n                                        y: droughtArea.map(entry => entry.Water_Year),\n                                        type: 'scatter',\n                                        mode: 'lines+markers',\n                                        marker: { color: 'purple' },\n                                        name: 'Water Year', // Assign a name to the trace\n                                    },\n                                ]}\n                                layout={{\n                                    title: 'Drought Area',\n                                    xaxis: {\n                                        title: 'Year',\n                                    },\n                                    yaxis: {\n                                        title: 'Drought Area (Mkm2)',\n                                    },\n                                    legend: {\n                                        orientation: 'h', // 'h' for horizontal, 'v' for vertical\n                                        x: 0.5,\n                                        y: 1.1,\n                                    },\n                                }}\n                                style={{ width: \"100%\", height: \"100%\" }}\n                            />\n\n                            <Plot\n                                data={[\n                                    {\n                                        x: droughtIntensity.map(entry => entry.Year),\n                                        y: droughtIntensity.map(entry => entry.Summer_Monsoon),\n                                        type: 'scatter',\n                                        mode: 'lines+markers',\n                                        marker: { color: 'red' },\n                                        name: 'Summer Monsoon', // Assign a name to the trace\n                                    },\n                                    {\n                                        x: droughtIntensity.map(entry => entry.Year),\n                                        y: droughtIntensity.map(entry => entry.Winter_Monsoon),\n                                        type: 'scatter',\n                                        mode: 'lines+markers',\n                                        marker: { color: 'blue' },\n                                        name: 'Winter Monsoon', // Assign a name to the trace\n                                    },\n                                    {\n                                        x: droughtIntensity.map(entry => entry.Year),\n                                        y: droughtIntensity.map(entry => entry.Calendar_Year),\n                                        type: 'scatter',\n                                        mode: 'lines+markers',\n                                        marker: { color: 'green' },\n                                        name: 'Calendar Year', // Assign a name to the trace\n                                    },\n                                    {\n                                        x: droughtIntensity.map(entry => entry.Year),\n                                        y: droughtIntensity.map(entry => entry.Water_Year),\n                                        type: 'scatter',\n                                        mode: 'lines+markers',\n                                        marker: { color: 'purple' },\n                                        name: 'Water Year', // Assign a name to the trace\n                                    },\n                                ]}\n                                layout={{\n                                    title: \"Mean Drought Intensity\",\n                                    xaxis: {\n                                        title: 'Year',\n                                    },\n                                    yaxis: {\n                                        title: 'Mean Drought Intensity',\n                                    },\n                                    legend: {\n                                        orientation: 'h', // 'h' for horizontal, 'v' for vertical\n                                        x: 0.5,\n                                        y: 1.1,\n                                    },\n                                }}\n                                style={{ width: \"100%\", height: \"100%\" }}\n                            />\n                        </>\n\n                    )}\n\n\n                    {loading && (\n                        <div className='map_layer_loader_container_desktop'>\n                            <div className=\"map_loader_container\">\n                                <span className=\"map_loader\"></span>\n                            </div>\n\n                        </div>\n\n                    )}\n\n\n                </div>\n\n                {loading && (\n                    <div className='map_layer_loader_container_mobile'>\n                        <div className=\"map_loader_container\">\n                            <span className=\"map_loader\"></span>\n                        </div>\n\n                    </div>\n\n                )}\n\n\n            </div>\n        </div>\n\n    )\n}\n\nexport default TimeseriesPage"],"names":["_ref","mapContainerRef","setAlertMessage","setShowAlert","useAlertContext","_jsx","onClick","handleExportMapPDF","mapContainer","current","viewportWidth","window","innerWidth","logo","Image","src","Logo","options","width","offsetWidth","height","offsetHeight","style","transform","transformOrigin","domtoimage","then","blob","reader","FileReader","onloadend","img","onload","aspectRatio","pdfOrientation","pdf","jsPDF","addImage","legendX","internal","pageSize","getWidth","MapLegend","pdfHeight","getHeight","pdfWidth","x","y","websiteName","textWidth","getStringUnitWidth","scaleFactor","textX","textY","setFontSize","text","save","compress","quality","result","readAsDataURL","catch","error","className","children","TimeseriesPage","useRef","startYear","setStartYear","useState","endYear","setEndYear","selectedSession","setSelectedSession","loading","setLoading","tehsilList","setTehsilList","tehsilSelectedItem","setTehsilSelectedItem","selectedData","setSelectedData","droughtArea","setDroughtArea","droughtIntensity","setDroughtIntensity","plotData","length","Object","entries","filter","key","value","parseInt","map","_ref2","year","droughtValue","Year","DroughtValue","parseFloat","useEffect","async","droughtAreaResponse","fetch","json","droughtIntensityResponse","console","fetchData","formattedSession","replace","response","concat","filteredDroughtData","data","ID","toString","handleSessionChange","event","_jsxs","Autocomplete","marginBottom","onChange","handleDistrictSelect","items","PlaceAttributes","item","DISTRICT","Set","sort","id","getOptionLabel","district","isOptionEqualToValue","option","Name","noOptionsText","renderOption","props","_createElement","Box","component","sx","fontSize","renderInput","params","TextField","label","handleTehsilSelect","TEHSIL","disabled","tehsil","handleStartYearChange","Array","from","_","index","handleEndYearChange","ExportTimeSeries","ref","_Fragment","STATE","Plot","entry","type","mode","marker","color","layout","xaxis","title","yaxis","Summer_Monsoon","name","Winter_Monsoon","Calendar_Year","Water_Year","legend","orientation"],"sourceRoot":""}